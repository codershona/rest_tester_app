<!DOCTYPE html>
<html>
  <head>
    <title>RestTesterAPP</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
  </head>

  <body>
  <h1>Bootstrap will do a lot of the heavy lifting for you – instead of having to figure out how to make your navbar stick to the top of the screen, you just have to put the correct class onto some <div> tags and Bootstrap’s style files will take over for you. It’s a good way to quickly get something half decent up and running. In the course on HTML and CSS, you’ll get the chance to design your own CSS framework, but for now Bootstrap is a good weapon of choice.</h1>
    <%= yield %>
  <p> Build responsive, mobile-first projects on the web with the world’s most popular front-end component library.

Bootstrap is an open source toolkit for developing with HTML, CSS, and JS. Quickly prototype your ideas or build your entire app with our Sass variables and mixins, responsive grid system, extensive prebuilt components, and powerful plugins built on jQuery. 7 Integration Testing

Integration tests are used to test how various parts of your application interact. They are generally used to test important workflows within our application.

For creating Rails integration tests, we use the test/integration directory for our application. Rails provides a generator to create an integration test skeleton for us.
$ rails generate integration_test user_flows
      exists  test/integration/
      create  test/integration/user_flows_test.rb

Here's what a freshly generated integration test looks like:
require 'test_helper'
 
class UserFlowsTest < ActionDispatch::IntegrationTest
  # test "the truth" do
  #   assert true
  # end
end

Here the test is inheriting from ActionDispatch::IntegrationTest. This makes some additional helpers available for us to use in our integration tests.</p>
  </body>
</html>